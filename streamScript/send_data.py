import os
import psycopg2
import json
import time
# from filters_json import filter_list as FilterMap

psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)
psycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)

QUERY_STRINGS = {}
DB_CONFIG = {}


def init():
    _init_db_config()
    _build_query_strings()


def _build_connection_string():
    connection_string = []
    connection_string.append("host=" + DB_CONFIG['DB_HOST'])
    connection_string.append("dbname=" + DB_CONFIG['DB_NAME'])
    connection_string.append("user=" + DB_CONFIG['DB_USERNAME'])
    connection_string.append("password=" + DB_CONFIG['DB_PASSWORD'])
    return " ".join(connection_string)


def _init_db_config():
    DB_CONFIG['DB_HOST'] = os.environ.get('R_DB_HOST')
    DB_CONFIG['DB_NAME'] = os.environ.get('R_DB_NAME')
    DB_CONFIG['DB_USERNAME'] = os.environ.get('R_DB_USERNAME')
    DB_CONFIG['DB_PASSWORD'] = os.environ.get('R_DB_PASSWORD')
    DB_CONFIG['DB_CONNECTION_STRING'] = _build_connection_string()


def _build_query_strings():
    QUERY_STRINGS['chart1'] = _build_q1_query()
    QUERY_STRINGS['chart2'] = _build_q2_query()
    QUERY_STRINGS['ticker1'] = _build_q3_query()
    QUERY_STRINGS['geomap1'] = _build_q4_query()
    QUERY_STRINGS['save_tweet'] = _build_save_tweet_sql()


def _connect_db():
    try:
        print "establishing a new connection..."
        conn = psycopg2.connect(DB_CONFIG['DB_CONNECTION_STRING'])
    except Exception as x:
        raise Exception("Error connecting to DB: " + str(DB_CONFIG['DB_CONNECTION_STRING']))
    print "Connection established and stored..."
    DB_CONFIG['DB_CONNECTION'] = conn
    return conn


def _get_connection():
    """get the current connection if it exists, else connect."""
    conn = DB_CONFIG.get('DB_CONNECTION')
    if conn is not None:
        print "connection exists, so reusing it..."
        return conn
    else:
        print "no connection found..."
        return _connect_db()


def _create_cursor():
    """create a new cursor and store it"""
    conn = _get_connection()
    print "creating new cursor..."
    DB_CONFIG['DB_CURSOR'] = conn.cursor()
    print "got new cursor."
    return DB_CONFIG['DB_CURSOR']


def _get_cursor():
    """get the current cursor if it exist, else create a new cursor"""
    cur = DB_CONFIG.get('DB_CURSOR')
    if cur is not None:
        print "cursor exists, using that..."
        return cur
    else:
        print "no cursor found, so creating one..."
        return _create_cursor()


def execute_query(sql, args=None):
    """execute the passed in SQL using the current cursor.
    If the query string takes any args pass those to the cursor as well."""
    # print "executing query..."
    connection_string = []
    connection_string.append("host=tweetstalk.cvf1ij0yeyiq.us-west-2.rds.amazonaws.com")
    connection_string.append("dbname=lil_tweetstalker")
    connection_string.append("user=tweetstalkers")
    connection_string.append("password=<password>")
    connection_string.append("port=5432")
    connection = " ".join(connection_string)



    DB_CONFIG['DB_CONNECTION_STRING']=connection



    try:
        print "getting cursor..."
        cur = _get_cursor()
        print "executing the following on cursor:"
        try:
            print "SQL STRING: {}".format(sql)
        except UnicodeEncodeError:
            return "Could not deal with emojis"
        # print "SQL ARGS: {}".format(args)
        cur.execute(sql, args)
        print "Getting results..."
        # results = cur.fetchall()
        print "Got results..."
    except psycopg2.Error as x:
        # this will catch any errors generated by the database
        print "*" * 40
        print "Error execuring query against DB: ", x.args
        print "Attempting to reconnect to the DB..."
        DB_CONFIG['DB_CONNECTION'].close()
        DB_CONFIG['DB_CONNECTION']  = None
        DB_CONFIG['DB_CURSOR']  = None
        time.sleep(5)
        conn = _get_connection()
        while conn is None:
            conn = _get_connection()
            time.sleep(5)
        # cur = _get_cursor()
    else:
        print "commiting"
        DB_CONFIG['DB_CONNECTION'].commit()
        # try:
        #     json_results = json.dumps(results)
        #     print "json results: ", json_results
        # except Exception as x:
        #     print "Error dumping json: ", json_results
        # else:
        #     return json_results

    return None

def _build_save_tweet_sql():
    # return ("""INSERT INTO "Tweet" (text) VALUES ('test')""")
    return ("""INSERT INTO "Tweet" (screen_name, text, location_lat, location_lng, created_at, hashtags)
            VALUES ('%s', '%s', '%s', '%s', '%s', '%s'); """)
