import os
import psycopg2
import json
import time
# from filters_json import filter_list as FilterMap

psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)
psycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)

QUERY_STRINGS = {}
DB_CONFIG = {}

def _get_pasword():
    password = open('config').read().split()
    return password[1]

def _connect_db():
    try:
        # print "establishing a new connection..."
        conn = psycopg2.connect(DB_CONFIG['DB_CONNECTION_STRING'])
    except Exception as x:
        raise Exception("Error connecting to DB: " + str(DB_CONFIG['DB_CONNECTION_STRING']))
    # print "Connection established and stored..."
    DB_CONFIG['DB_CONNECTION'] = conn
    return conn


def _get_connection():
    """get the current connection if it exists, else connect."""
    conn = DB_CONFIG.get('DB_CONNECTION')
    if conn is not None:
        # print "connection exists, so reusing it..."
        return conn
    else:
        # print "no connection found..."
        return _connect_db()


def _create_cursor():
    """create a new cursor and store it"""
    conn = _get_connection()
    # print "creating new cursor..."
    DB_CONFIG['DB_CURSOR'] = conn.cursor()
    # print "got new cursor."
    return DB_CONFIG['DB_CURSOR']


def _get_cursor():
    """get the current cursor if it exist, else create a new cursor"""
    cur = DB_CONFIG.get('DB_CURSOR')
    if cur is not None:
        # print "cursor exists, using that..."
        return cur
    else:
        # print "no cursor found, so creating one..."
        return _create_cursor()


def execute_query(sql, args=None):
    """execute the passed in SQL using the current cursor.
    If the query string takes any args pass those to the cursor as well."""
    password = _get_pasword()
    connection_string = []
    connection_string.append("host=tweetstalk.cvf1ij0yeyiq.us-west-2.rds.amazonaws.com")
    connection_string.append("dbname=lil_tweetstalker")
    connection_string.append("user=tweetstalkers")
    connection_string.append("password=")
    connection_string.append(password)
    connection_string.append("port=5432")
    connection = " ".join(connection_string)



    DB_CONFIG['DB_CONNECTION_STRING']=connection



    try:
        # print "getting cursor..."
        cur = _get_cursor()
        # print "executing the following on cursor:"
        try:
            test_formatting = "SQL STRING: {}".format(sql)
        except UnicodeEncodeError:
            return "Could not deal with emojis"
        cur.execute(sql, args)

    except psycopg2.Error as x:
        # this will catch any errors generated by the database
        # print "*" * 40
        # print "Error execuring query against DB: ", x.args
        # print "Attempting to reconnect to the DB..."
        DB_CONFIG['DB_CONNECTION'].close()
        DB_CONFIG['DB_CONNECTION']  = None
        DB_CONFIG['DB_CURSOR']  = None
        time.sleep(5)
        conn = _get_connection()
        while conn is None:
            conn = _get_connection()
            time.sleep(5)

    else:
        # print "commiting"
        DB_CONFIG['DB_CONNECTION'].commit()


    return None


# if __name__ == '__main__':
    # print _get_pasword()